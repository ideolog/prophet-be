import openai
import os
import re
from django.utils.text import slugify
from .models import Claim

openai.api_key = os.getenv("OPENAI_API_KEY")

def clean_text(text):
    """
    Cleans AI-generated claim:
    - Removes numbering (1., 2., 3.)
    - Strips unwanted single ('') and double ("") quotation marks
    - Ensures proper claim formatting
    """
    text = text.strip()  # Trim spaces
    text = re.sub(r'^[\'"\d\.\)\-\s]+', '', text)  # Remove leading quotes, numbers, and punctuation
    text = re.sub(r'[\'"]$', '', text)  # Remove trailing quotes
    return text

def generate_ai_claims(original_claim, ai_verified_status, ai_model="OpenAI"):
    """
    Uses OpenAI to generate refined versions of a claim and stores them as separate AI-verified claims.
    Each AI-generated claim is stored as a distinct entry.
    """
    prompt = (
        f"Rewrite the following claim in three alternative ways while keeping its meaning intact. "
        f"Ensure that the claim remains a **statement** (not a question) and is written in a way that allows users "
        f"to confidently bet **True or False**. Claims should be **provocative**, **clear**, and **engaging**. "
        f"Do not include numbering. Provide three separate responses:\n\n'{original_claim.text}'"
    )

    try:
        client = openai.OpenAI(api_key=openai.api_key)  # Initialize OpenAI client

        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are an AI assistant that refines claims for grammar and clarity."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=200
        )

        # Extract AI-generated claims from response
        suggestions = response.choices[0].message.content.strip().split("\n")

        for suggestion in suggestions:
            cleaned_suggestion = clean_text(suggestion)  # Remove numbering and quotes

            # Store each AI-generated claim separately
            if cleaned_suggestion:
                Claim.objects.create(
                    text=cleaned_suggestion,
                    slug=slugify(cleaned_suggestion)[:150],  # Ensure unique slug
                    verification_status=ai_verified_status,
                    status_description=f"Generated by {ai_model}.",
                    parent_claim=original_claim,
                    author=original_claim.author,  # Preserve the original author's wallet
                    generated_by_ai=True,  # Mark as AI-generated
                    ai_model=ai_model  # Store AI model info
                )
                print(f"✅ Created AI claim: {cleaned_suggestion}")

        return True  # AI generation succeeded

    except Exception as e:
        print(f"❌ OpenAI API error: {e}")
        return False  # AI generation failed
